import heapq
#heapq -> heap queue algorithm (binery tree)

class Node:
    def __init__(self, position, parent=None): #initializing objects
        self.position = position
        self.parent = parent
        self.g = 0  # Cost from start to this node
        self.h = 0  # Heuristic cost from this node to goal
        self.f = 0  # Total cost

    def __eq__(self, other): # Define equality between 2 instances(comparing memory)
        return self.position == other.position

    def __lt__(self, other): # Define behaviour of less than operator.
        return self.f < other.f

def a_star(grid, start, end):
    # Initialize open and closed lists
    open_list = []
    closed_list = set()

    # Create start and end node
    start_node = Node(start)
    end_node = Node(end)

    # Add the start node to the open list
    heapq.heappush(open_list, start_node) # heapq.heappush() is function which adds elements while maintaining the heap property...

    while open_list:
        # Pop the current node from the open list
        current_node = heapq.heappop(open_list) # used to remove and return the smallest element from a heap
        closed_list.add(current_node.position)

        # Check if we have reached the goal
        if current_node == end_node:
            path = [] # creates a empty list
            while current_node:
                path.append(current_node.position) # append() -> adds element at the end of the list...
                current_node = current_node.parent
            return path[::-1]  # Return reversed path

        # Generate children
        (x, y) = current_node.position
        neighbors = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]
        for next_position in neighbors:
            # Check if the next position is within bounds
            if (0 <= next_position[0] < len(grid)) and (0 <= next_position[1] < len(grid[0])):
                if grid[next_position[0]][next_position[1]] != 0:
                    continue

            # Create the child node
            child_node = Node(next_position, current_node)
            if child_node.position in closed_list:
                continue

            # Calculate costs
            child_node.g = current_node.g + 1
            child_node.h = ((child_node.position[0] - end_node.position[0]) ** 2 +
                            (child_node.position[1] - end_node.position[1]) ** 2)
            child_node.f = child_node.g + child_node.h # f = g+h

            # Check if the child node is in the open list
            if any(open_node for open_node in open_list if child_node == open_node and child_node.f >= open_node.f):
                continue

            # Add the child node to the open list
            heapq.heappush(open_list, child_node) # add element into the heap

    return None  # Return None if there is no path

# Example usage
if __name__ == "__main__":
    grid = [
        [0, 0, 0, 0, 0],
        [0, 1, 1, 1, 0],
        [0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0]
    ]

    start = (0, 0)
    end = (4, 4)
    path = a_star(grid, start, end)
    print("Path found:", path)
